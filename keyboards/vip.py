from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import admin
from utils import category
#–µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
inline_btn_1 = InlineKeyboardButton('‚ö°Ô∏è–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±‚ö°Ô∏è', callback_data='pay')
inline_btn_2 = InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='menu')
keyboardNotVip= InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_2)

#–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
inline_btn_1 = InlineKeyboardButton('–í–ê–® –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ üë®üèº‚Äçüíª', callback_data='account')
keyboardMenu = InlineKeyboardMarkup(row_width=2).add(inline_btn_1)
inline_btn_2 = InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ', callback_data='pay')
inline_btn_3 = InlineKeyboardButton('üìç–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤', callback_data='partners')
keyboardMenu.add(inline_btn_2, inline_btn_3)
inline_btn_4 = InlineKeyboardButton('–ù–ê–® –ö–ê–ù–ê–õ üí≠', url='yandex.ru')
inline_btn_5 = InlineKeyboardButton('‚ö°Ô∏è–û–ù–õ–ê–ô–ù –ü–û–ú–û–©–¨‚ö°Ô∏è', callback_data='search_partners')
keyboardMenu.add(inline_btn_4, inline_btn_5)

keyboardMenu = {False:keyboardMenu, True:admin.keyboardMenu}


#–∞–∫–∫–∞—É–Ω—Ç
inline_btn_1 = InlineKeyboardButton('üü°–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∫—É—é —Å–∏—Å—Ç–µ–º—Éüü°', callback_data='ref')
inline_btn_2 = InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back')
inline_btn_3 = InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã', callback_data='client_withdrawal_req')
keyboardAccount= InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_3, inline_btn_2)
#—Å—Ç—Ä–∞

keyboardEmpty = InlineKeyboardMarkup()

#–æ–Ω–ª–∞–π–Ω –ø–æ–º–æ—â—å
inline_btn_1 = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüÜò', callback_data='admin_help')
inline_btn_2 = InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back')
keyboardPartnerSearch = InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_2)


async def get_cities_keyboard(cur_page, is_admin):
    cities = await category.get_cities((cur_page-1)*3)
    cities_cnt = await category.get_cities_count()
    keyboard = InlineKeyboardMarkup(row_width=3)
    if cities[0] == False or cities_cnt[0] == False:
        return False
    for i in cities[1]:

        inline_btn_1 = InlineKeyboardButton(i['name'], callback_data='city_pick_'+str(i['id']))
        keyboard.add(inline_btn_1)

    inline_btn_2 = InlineKeyboardButton('‚û°', callback_data='next_cities')

    max_page = (cities_cnt[1]+2)//3

    inline_btn_1 = InlineKeyboardButton(f'{cur_page}/{max_page}', callback_data='kekekek')

    inline_btn_3 = InlineKeyboardButton('‚¨Ö', callback_data='prev_cities')
    if max_page <= 1:
        pass
    elif cur_page == max_page:
        keyboard.add(inline_btn_3, inline_btn_1, )
    elif cur_page == 1:
        keyboard.add(inline_btn_2, inline_btn_1)
    else:
        keyboard.add(inline_btn_3, inline_btn_1,inline_btn_2)

    if is_admin:
        inline_btn_3 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å‚ûï', callback_data='add_city')
        keyboard.add(inline_btn_3)

    inline_btn_3 = InlineKeyboardButton('–í –º–µ–Ω—é‚Ü©', callback_data='menu')
    keyboard.add(inline_btn_3)
    return keyboard

async def get_category_keyboard(cur_page, city, is_admin):
    categories = await category.get_categories(skipped = (cur_page-1)*6, city = city)
    categoriesCnt = await category.get_categories_count(city)

    categoriesBtn = []

    if categories[0] == False or categoriesCnt[0] == False:
        return False
    for i in range(0, len(categories[1]), 2):
        if i+1 == len(categories[1]):
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='category_pick'+'_'+str(categories[1][i]['id']))])
        else:
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='category_pick'+'_'+str(categories[1][i]['id'])), InlineKeyboardButton(categories[1][i+1]['name'], callback_data='category_pick_'+str(categories[1][i+1]['id']))])


    maxPage = (categoriesCnt[1]+5)//6

    inline_btn_1 = InlineKeyboardButton(f'{cur_page}/{maxPage}', callback_data='kekekek')

    inline_btn_2 = InlineKeyboardButton('‚û°', callback_data='next')
    inline_btn_3 = InlineKeyboardButton('‚¨Ö', callback_data='prev')
    if maxPage <= 1:
        pass
    elif cur_page == maxPage:
        categoriesBtn.append([inline_btn_3, inline_btn_1])
    elif cur_page == 1:
        categoriesBtn.append([inline_btn_2, inline_btn_1])
    else:
        categoriesBtn.append([inline_btn_3, inline_btn_1, inline_btn_2])

    if is_admin:
        inline_btn_3 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å‚ûï', callback_data='add')
        inline_btn_4 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å‚ùå', callback_data='delete')
        categoriesBtn.append([inline_btn_3, inline_btn_4])

    inline_btn_3 = InlineKeyboardButton('–ù–∞–∑–∞–¥‚Ü©', callback_data='back')
    categoriesBtn.append([inline_btn_3])
    resKeyboard = InlineKeyboardMarkup(inline_keyboard=categoriesBtn)


    return resKeyboard


async def get_partner_keyboard(cur_page, city,categoryId, is_admin):
    categories = await category.get_partners(skipped = (cur_page-1)*6, city = city, category=categoryId)
    categoriesCnt = await category.get_partners_count(city = city, category = categoryId)

    categoriesBtn = []

    if categories[0] == False or categoriesCnt[0] == False:
        return False
    for i in range(0, len(categories[1]), 2):
        if i+1 == len(categories[1]):
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='partner_pick'+'_'+str(categories[1][i]['id']))])
        else:
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='partner_pick'+'_'+str(categories[1][i]['id'])), InlineKeyboardButton(categories[1][i+1]['name'], callback_data='partner_pick_'+str(categories[1][i+1]['id']))])


    maxPage = (categoriesCnt[1]+5)//6

    inline_btn_1 = InlineKeyboardButton(f'{cur_page}/{maxPage}', callback_data='kekekek')

    inline_btn_2 = InlineKeyboardButton('‚û°', callback_data='next')
    inline_btn_3 = InlineKeyboardButton('‚¨Ö', callback_data='prev')
    if maxPage <= 1:
        pass
    elif cur_page == maxPage:
        categoriesBtn.append([inline_btn_3, inline_btn_1])
    elif cur_page == 1:
        categoriesBtn.append([inline_btn_2, inline_btn_1])
    else:
        categoriesBtn.append([inline_btn_3, inline_btn_1, inline_btn_2])

    if is_admin:
        inline_btn_3 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å‚ûï', callback_data='add')
        inline_btn_4 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å‚ùå', callback_data='delete')
        categoriesBtn.append([inline_btn_3, inline_btn_4])
        inline_btn_3 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¢—ç–≥‚ûï', callback_data='tag_add')
        categoriesBtn.append([inline_btn_3])

    inline_btn_3 = InlineKeyboardButton('–ù–∞–∑–∞–¥‚Ü©', callback_data='back')
    categoriesBtn.append([inline_btn_3])
    resKeyboard = InlineKeyboardMarkup(inline_keyboard=categoriesBtn)


    return resKeyboard

async def get_category_by_search(cur_page, city, req, is_admin):
    categories = await category.get_categories_by_search(skipped = (cur_page-1)*6, city = city, req=req)
    categoriesCnt = await category.get_categories_by_search_count(city = city, req=req)
    categoriesBtn = []

    if categories[0] == False or categoriesCnt[0] == False or categoriesCnt[1] == 0:
        return None


    for i in range(0, len(categories[1]), 2):
        if i+1 == len(categories[1]):
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='category_pick'+'_'+str(categories[1][i]['id']))])
        else:
            categoriesBtn.append([InlineKeyboardButton(categories[1][i]['name'], callback_data='category_pick'+'_'+str(categories[1][i]['id'])), InlineKeyboardButton(categories[1][i+1]['name'], callback_data='category_pick_'+str(categories[1][i+1]['id']))])


    maxPage = (categoriesCnt[1]+5)//6

    inline_btn_1 = InlineKeyboardButton(f'{cur_page}/{maxPage}', callback_data='kekekek')

    inline_btn_2 = InlineKeyboardButton('‚û°', callback_data='next')
    inline_btn_3 = InlineKeyboardButton('‚¨Ö', callback_data='prev')
    if maxPage <= 1:
        pass
    elif cur_page == maxPage:
        categoriesBtn.append([inline_btn_3, inline_btn_1])
    elif cur_page == 1:
        categoriesBtn.append([inline_btn_2, inline_btn_1])
    else:
        categoriesBtn.append([inline_btn_3, inline_btn_1, inline_btn_2])

    inline_btn_3 = InlineKeyboardButton('–í –º–µ–Ω—é‚Ü©', callback_data='back')
    categoriesBtn.append([inline_btn_3])
    resKeyboard = InlineKeyboardMarkup(inline_keyboard=categoriesBtn)


    return resKeyboard



