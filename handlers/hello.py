from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.types.message import ContentType
from create import dp, bot
from utils.account import was_in_bot
from utils.checkers import is_float, buatify_int
import keyboards
import math
from mailing.messages_operations import add_msg

# –ú–µ–Ω—é—à–∫–∏ -----

async def reload(message: types.Message, state):
    photo = types.InputFile('pictures/hello.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.chat.first_name} üòå \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "<b>–ê–í–¢–û –¢–ï–ú–ê</b>" \n\n–ù–∏–∂–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã üëáüèº',
                               reply_markup=keyboards.hello.keyboardHelloMenu, parse_mode=types.ParseMode.HTML)
    await state.finish()
    await state.set_state(mainState.state.state)


async def hello_handler(message: types.Message, state):
    photo = types.InputFile('pictures/hello.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.chat.first_name} üòå \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "<b>–ê–í–¢–û –¢–ï–ú–ê</b>" \n\n–ù–∏–∂–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã üëáüèº',
                               reply_markup=keyboards.hello.keyboardHelloMenu, parse_mode=types.ParseMode.HTML)
    await state.finish()
    await was_in_bot(message.chat.id)
    await state.set_state(mainState.state.state)


async def back_to_menu_call(callback: types.CallbackQuery, state):
    photo = types.InputFile('pictures/hello.jpg')
    await callback.message.answer_photo(photo=photo,
                                        caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "<b>–ê–í–¢–û –¢–ï–ú–ê</b>"\n\n–ù–∏–∂–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã üëáüèº',
                                        reply_markup=keyboards.hello.keyboardMainMenu, parse_mode=types.ParseMode.HTML)
    await callback.answer()
    await state.finish()
    await state.set_state(mainState.state.state)


async def back_to_menu_msg(message: types.Message, state):
    photo = types.InputFile('pictures/hello.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "<b>–ê–í–¢–û –¢–ï–ú–ê</b>"\n\n–ù–∏–∂–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã üëáüèº',
                               reply_markup=keyboards.hello.keyboardMainMenu, parse_mode=types.ParseMode.HTML)
    await state.finish()
    await state.set_state(mainState.state.state)


class mainState(StatesGroup):
    state = State()


# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ----------------------------------------------------------------------------------------------------------
class calculator_call(StatesGroup):
    state1 = State()
    state2 = State()
    state3 = State()
    state4 = State()
    state5 = State()
    state6 = State()


async def stage1_calculator(callback: types.CallbackQuery, state: calculator_call):
    photo = types.InputFile('pictures/calculator_hello.jpg')

    await callback.message.answer_photo(photo=photo,
                                        caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ä–∞—Å—Ö–æ–¥–∞–º–∏ —Å –Ω–∞—à–µ–π –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∏ –±–µ–∑ –Ω–µ–µ üëáüèº',
                                        reply_markup=keyboards.hello.keyboardMainCalculator)
    await callback.answer()
    await state.set_state(calculator_call.state1.state)


async def calculator_state1(callback: types.CallbackQuery, state: calculator_call):
    photo = types.InputFile('pictures/calculator1.jpg')
    await callback.message.answer_photo(photo=photo,
                                        caption=f'‚õΩÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –±–µ–Ω–∑–∏–Ω –≤ –º–µ—Å—è—Ü.\n\n*–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ–Ω—É—é —Å—É–º–º—É')
    await callback.answer()
    await state.set_state(calculator_call.state2.state)


async def calculator_state2(message: types.Message, state: calculator_call):
    if is_float(message.text) == False:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!')
        return
    await state.update_data(fuel=float(message.text))
    photo = types.InputFile('pictures/calculator2.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'üõ† –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –¢–û –≤ –≥–æ–¥?\n\n*–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É',
                               )
    await state.set_state(calculator_call.state3.state)


async def calculator_state3(message: types.Message, state: calculator_call):
    if is_float(message.text) == False:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!')
        return
    await state.update_data(to=float(message.text))
    photo = types.InputFile('pictures/calculator3.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'üöò –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —É—Ö–æ–¥–∏—Ç –≤ –º–µ—Å—è—Ü –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã? (–º–æ–π–∫–∞ –º–∞—à–∏–Ω—ã, –ø–æ–∫—É–ø–∫–∞ –∏ –∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã –∏ —Ç.–¥.)\n\n*–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É',
                               )
    await state.set_state(calculator_call.state4.state)


async def calculator_state4(message: types.Message, state: calculator_call):
    if is_float(message.text) == False:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!')
        return
    await state.update_data(expenses=float(message.text))

    photo = types.InputFile('pictures/calculator4.jpg')
    await message.answer_photo(photo=photo,
                               caption=f'üÜò –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –º–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –º–µ—Å—è—Ü –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã? (—ç–≤–∞–∫—É–∞—Ç–æ—Ä, —Ä–µ–º–æ–Ω—Ç)\n\n*–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É',
                               )
    await state.set_state(calculator_call.state5.state)


async def calculator_state5(message: types.Message, state: calculator_call):
    if is_float(message.text) == False:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!')
        return
    await state.update_data(emergency=float(message.text))
    user_data = await state.get_data()
    discount = [0.9, 0.9, 0.85, 0.9]
    inc = [12, 1, 12, 12]
    cur_sum = 0
    new_sum = 0
    j = 0
    for i in user_data:
        cur_sum += user_data[i] * inc[j]
        new_sum += user_data[i] * inc[j] * discount[j]
        j += 1
    await message.answer(
        text=f'–ò—Ç–æ–≥–æ –∑–∞ –≥–æ–¥ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –º–∞—à–∏–Ω—É –ø—Ä–∏–º–µ—Ä–Ω–æ: <b>{buatify_int(math.ceil(cur_sum))} —Ä—É–±–ª–µ–π</b>\n\n–£—á–∞—Å—Ç–≤—É—è –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤—ã –±—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ <b>{buatify_int(math.ceil(cur_sum - new_sum))} —Ä—É–±–ª–µ–π</b>, —Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ç—Ç–æ 500 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü\n\n–ò –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ–≥–æ –ª–∏—à—å <b>{buatify_int(math.ceil(new_sum))} —Ä—É–±–ª–µ–π</b> \n\n–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É üëáüèº',
        reply_markup=keyboards.hello.keyboardEndCalculator, parse_mode=types.ParseMode.HTML)
    await state.set_state(calculator_call.state6.state)


# –ö–∞–∫ —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º --------------------------------------------------------------------------------------------------
class how_to(StatesGroup):
    state1 = State()
    state2 = State()
    state3 = State()


async def how_to_state1(callback: types.CallbackQuery, state):
    photo = types.InputFile('pictures/how_to1.jpg')
    await callback.message.answer_photo(photo=photo,
                                        caption=f'–í –Ω–∞—à–µ–º –∫–ª—É–±–µ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø–æ–º–æ—â—å –æ—Ç <b>–Ω–∞—Å –∏ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∫–ª—É–±–∞.</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í—Å—è –ø–æ–º–æ—â—å –æ—Ç –∫–ª—É–±–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2 –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b>–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–∏–¥–æ–∫.</b>\n\n‚≠êÔ∏è –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª—É–±–∞ ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞—Ä—Ç—É –∫–ª—É–±–∞.',
                                        reply_markup=keyboards.hello.keyboardHowTo1, parse_mode=types.ParseMode.HTML)
    await callback.answer()
    await state.set_state(how_to.state1.state)


async def how_to_state2(callback: types.CallbackQuery, state):
    photo = types.InputFile('pictures/how_to2.jpg')
    await callback.message.answer_photo(photo=photo,
                                        caption=f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –∫–ª—É–±–µ: <b>500 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.</b>\n<i>*—ç—Ç–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–∏–∂–µ, —á–µ–º —Å–∫–∏–¥–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.</i>\n\n–ò–º–µ—è –∫–∞—Ä—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ <b>—Å–∫–∏–¥–∫–µ –¥–æ 20% —É –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.</b>\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ—é —ç–∫–æ–Ω–æ–º–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞  üëáüèº',
                                        reply_markup=keyboards.hello.keyboardHowTo2, parse_mode=types.ParseMode.HTML)
    await callback.answer()
    await state.set_state(how_to.state2.state)


async def how_to_state3(callback: types.CallbackQuery, state):
    photo = types.InputFile('pictures/how_to3.jpg')
    await callback.message.answer_photo(photo=photo,
                                        caption=f'<b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ</b>\n<i>*—Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ 20%</i>\n\n- 30 –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤\n- 7 —Å–ª—É–∂–± —ç–≤–∞–∫—É–∞—Ü–∏–∏\n- 11 —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π\n- 8 —Å–µ—Ä–≤–∏—Å–æ–≤ ¬´–ú–æ–±–∏–ª—å–Ω—ã–π —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂¬ª\n- 4 –∞–≤—Ç–æ—é—Ä–∏—Å—Ç–∞\n- 4 —Å–µ—Ä–≤–∏—Å–∞ ¬´–î–æ—Å—Ç–∞–≤–∫–∞ –±–µ–Ω–∑–∏–Ω–∞¬ª\n- 12 –∞–≤—Ç–æ–º–æ–µ–∫\n- 12 —Ç–µ—Ö–Ω–∞—Ä–µ–π –∏ —Å–ª–µ—Å–∞—Ä–µ–π\n\n‚ùó<b>–ò –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, —ç–∫–æ–Ω–æ–º–∏—é –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—é –∫–∞—á–µ—Å—Ç–≤–∞.</b>',
                                        reply_markup=keyboards.hello.keyboardHowTo3, parse_mode=types.ParseMode.HTML)
    await add_msg(callback.message.chat.id, 'getPhone')
    await callback.answer()
    await state.set_state(how_to.state3.state)


async def file_call(callback: types.CallbackQuery, state):
    file = types.InputFile('pictures/more.pdf')
    await callback.message.answer_document(document=file)
    await callback.answer()


# about
class about_state(StatesGroup):
    state1 = State()


async def about_call(callback: types.CallbackQuery, state):
    video = types.InputFile('pictures/video.mp4')
    await callback.message.answer_video(video=video,
                                        caption=f'<b>–ê–≤—Ç–æ —Ç–µ–º–∞</b> - —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–æ–¥–∏—Ç–µ–ª–µ–π)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã</b> - —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–º —É—Å–ª—É–≥–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–ù–∞—à–∞ —Ü–µ–ª—å</b> - —ç—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–π –∫–ª—É–± –ø–æ–º–æ—â–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.',
                                        reply_markup=keyboards.hello.keyboardEndCalculator,  parse_mode=types.ParseMode.HTML)
    await callback.answer()
    await state.set_state(about_state.state1.state)


# conctac
class contacts_state(StatesGroup):
    state1 = State()


async def contacts_call(callback: types.CallbackQuery, state):
    await callback.message.answer(text='üì¨–ü–æ –≤–æ–ø—Ä–æ—Å—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ @',
                                  reply_markup=keyboards.hello.keyboardBack)
    await callback.answer()
    await state.set_state(contacts_state.state1.state)


# todo –£–î–ê–õ–ò–¢–¨ –£–î–ê–õ–ò–¢–¨ –£–î–ê–õ–ò–¢–¨ –£–î–ê–õ–ò–¢–¨ –£–î–õ–ê–¢–¨ –£–î–ê–õ–ò–¢–¨
from utils import vip_status


async def give_vip(message: types.Message):
    res = await vip_status.set_vip(message.chat.id, 3, message.chat.first_name)
    await message.answer('–£—Å–ø–µ—à–Ω–æ')



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(back_to_menu_msg, state='*', commands=['menu'])
    #dp.register_message_handler(give_vip, state='*', commands=['vip'])


    # –ú–µ–Ω—é—à–∫–∏
    dp.register_message_handler(hello_handler, state=None)
    dp.register_callback_query_handler(back_to_menu_call, state=None)
    dp.register_callback_query_handler(back_to_menu_call, state='*', text='main_menu')


    # calculator
    dp.register_callback_query_handler(stage1_calculator, state=mainState.state, text_startswith='calculator')
    dp.register_callback_query_handler(back_to_menu_call, state=calculator_call.state1, text_startswith='back')

    dp.register_callback_query_handler(calculator_state1, state=calculator_call.state1, text_startswith='begin')
    dp.register_message_handler(calculator_state2, state=calculator_call.state2)
    dp.register_message_handler(calculator_state3, state=calculator_call.state3)
    dp.register_message_handler(calculator_state4, state=calculator_call.state4)
    dp.register_message_handler(calculator_state5, state=calculator_call.state5)
    dp.register_callback_query_handler(back_to_menu_call, state=calculator_call.state6, text_startswith='menu')
    dp.register_callback_query_handler(how_to_state1, state=calculator_call.state6, text_startswith='how_to')

    # how_to
    dp.register_callback_query_handler(how_to_state1, state=mainState.state, text_startswith='how_to')

    dp.register_callback_query_handler(how_to_state2, state=how_to.state1, text_startswith='more')
    dp.register_callback_query_handler(back_to_menu_call, state=how_to.state1, text_startswith='menu')
    # todo —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ pay
    # dp.register_callback_query_handler(how_to_state2, state=how_to.state1, text='pay')

    dp.register_callback_query_handler(how_to_state3, state=how_to.state2, text_startswith='more')
    dp.register_callback_query_handler(stage1_calculator, state=how_to.state2, text_startswith='calculator')
    dp.register_callback_query_handler(how_to_state1, state=how_to.state2, text_startswith='back')

    # todo —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ pay
    # dp.register_callback_query_handler()
    dp.register_callback_query_handler(file_call, state=how_to.state3, text_startswith='file')
    dp.register_callback_query_handler(how_to_state2, state=how_to.state3, text_startswith='back')

    # about
    dp.register_callback_query_handler(about_call, state=mainState.state, text_startswith='about')

    dp.register_callback_query_handler(how_to_state1, state=about_state.state1, text_startswith='how_to')
    dp.register_callback_query_handler(back_to_menu_call, state=about_state.state1, text_startswith='menu')

    # contacts
    dp.register_callback_query_handler(contacts_call, state=mainState.state, text_startswith='collaboration')

    dp.register_callback_query_handler(back_to_menu_call, state=contacts_state.state1, text_startswith='menu')

